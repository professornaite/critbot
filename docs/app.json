[{"name":"app.R","content":"# critbot-shiny/app.R\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(here)\n\nui <- fluidPage(\n  titlePanel(\"CritBot Word Query\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"word\", \"Enter a word to query:\"),\n      actionButton(\"submit\", \"Submit\"),\n      tags$hr(),\n      actionButton(\"reset\", \"Clear Results\", class = \"btn-warning\")\n    ),\n    mainPanel(\n      textOutput(\"result\"),\n      uiOutput(\"agreement_ui\"),\n      uiOutput(\"add_word_ui\"),\n      uiOutput(\"next_steps_ui\")  # New UI element for next steps\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Reactive values for state management\n  rv <- reactiveValues(\n    current_word = NULL,\n    definition = NULL,\n    show_agreement = FALSE,\n    show_add_word = FALSE,\n    show_next_steps = FALSE\n  )\n  \n  # Load critical words dataset\n  critical_words_path <- here(\"data\", \"critical_words_dataset.csv\")\n  critical_words_df <- tryCatch({\n    if (file.exists(critical_words_path)) {\n      read.csv(critical_words_path, stringsAsFactors = FALSE)\n    } else {\n      data.frame(Keyword = character(), Definition = character())\n    }\n  }, error = function(e) {\n    showNotification(\"Critical dataset not found! Contact administrator.\", \n                     type = \"error\")\n    data.frame(Keyword = character(), Definition = character())\n  })\n  \n  # Handle word submission\n  observeEvent(input$submit, {\n    req(input$word)\n    word <- tolower(trimws(input$word))\n    \n    # Reset UI state\n    rv$show_agreement <- FALSE\n    rv$show_add_word <- FALSE\n    rv$show_next_steps <- FALSE\n    \n    if (nchar(word) > 0) {\n      found_word <- critical_words_df %>%\n        filter(tolower(Keyword) == word)\n      \n      if (nrow(found_word) > 0) {\n        rv$current_word <- word\n        rv$definition <- found_word$Definition[1]\n        rv$show_agreement <- TRUE\n      } else {\n        rv$current_word <- word\n        rv$definition <- NULL\n        rv$show_add_word <- TRUE\n      }\n    }\n  })\n  \n  # Handle reset\n  observeEvent(input$reset, {\n    updateTextInput(session, \"word\", value = \"\")\n    rv$current_word <- NULL\n    rv$definition <- NULL\n    rv$show_agreement <- FALSE\n    rv$show_add_word <- FALSE\n    rv$show_next_steps <- FALSE\n  })\n  \n  # Display main result\n  output$result <- renderText({\n    if (is.null(rv$current_word)) {\n      return(\"Please enter a word to query.\")\n    }\n    if (!is.null(rv$definition)) {\n      return(paste(\"Definition:\", rv$definition))\n    }\n    \"Word not found in the database.\"\n  })\n  \n  # Agreement UI elements\n  output$agreement_ui <- renderUI({\n    if (rv$show_agreement) {\n      tagList(\n        radioButtons(\"agreement\", \"Do you agree with this definition?\",\n                     choices = c(\"Yes\", \"No\"), selected = character(0)),\n        conditionalPanel(\n          condition = \"input.agreement == 'No'\",\n          textInput(\"new_definition\", \"Enter your alternative definition:\"),\n          actionButton(\"submit_new\", \"Submit Alternative Definition\")\n        )\n      )\n    }\n  })\n  \n  # Next steps UI after agreement\n  output$next_steps_ui <- renderUI({\n    if (rv$show_next_steps) {\n      tagList(\n        h4(\"Next Steps:\"),\n        actionButton(\"new_search\", \"Search New Term\", class = \"btn-primary\"),\n        actionButton(\"related_terms\", \"Find Related Terms\", class = \"btn-info\")\n      )\n    }\n  })\n  \n  # Handle agreement selection\n  observeEvent(input$agreement, {\n    req(input$agreement)\n    if (input$agreement == \"Yes\") {\n      rv$show_next_steps <- TRUE\n    } else {\n      rv$show_next_steps <- FALSE\n    }\n  })\n  \n  # Handle new search\n  observeEvent(input$new_search, {\n    updateTextInput(session, \"word\", value = \"\")\n    rv$current_word <- NULL\n    rv$definition <- NULL\n    rv$show_agreement <- FALSE\n    rv$show_add_word <- FALSE\n    rv$show_next_steps <- FALSE\n  })\n  \n  # Handle related terms search (placeholder for future implementation)\n  observeEvent(input$related_terms, {\n    req(rv$current_word)\n    showNotification(\"Related terms feature coming soon!\", type = \"message\")\n  })\n  \n  # New UI for adding words with appending logic for dataset updates\n  output$add_word_ui <- renderUI({\n    if (rv$show_add_word) {\n      tagList(\n        h4(\"Word not found. Would you like to add it to our database?\"),\n        textAreaInput(\"new_word_definition\", \"Enter your definition:\",\n                      rows = 3, resize = \"vertical\"),\n        actionButton(\"submit_new_word\", \"Add New Word\")\n      )\n    }\n  })\n  \n  # Handle new word submission with appending logic for dataset updates\n  observeEvent(input$submit_new_word, {\n    req(input$new_word_definition)\n    \n    new_entry <- data.frame(\n      Keyword = rv$current_word,\n      Definition = trimws(input$new_word_definition),\n      stringsAsFactors = FALSE\n    )\n    \n    tryCatch({\n      # Append new entry to the dataset file without overwriting existing data\n      write.table(new_entry, file = critical_words_path, sep = \",\",\n                  col.names = !file.exists(critical_words_path), row.names = FALSE,\n                  append = TRUE)\n      \n      showNotification(\"New word added successfully!\", type = \"message\")\n      \n      # Update reactive values for UI state management after adding the new word\n      critical_words_df <<- bind_rows(critical_words_df, new_entry)\n      \n      rv$current_word <- NULL\n      \n      updateTextInput(session, \"new_word_definition\", value = \"\")\n      \n      rv$show_add_word <- FALSE\n      \n    }, error = function(e) {\n      showNotification(paste(\"Failed to add new word:\", e$message), type = \"error\")\n    })\n  })\n}\n\nshinyApp(ui, server)\n\n\n","type":"text"}]
